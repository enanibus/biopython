###Group 4 (María Baena, Diego Calzada and Alfonso Cordero)


##1. SCRIPTS
#1.1.1
rm(list = ls())
#1.1.2
x <- seq(from = 123, to = 297, by = 3.5)
#1.2.3
summary(x)
#1.2.1 We would open the R files with RStudio and there we would select
  #the code to run and submit it to the R interpreter so that it is 
    #run in the R console
#1.2.2 We would do
source("R-ex-1.R", echo = TRUE, max.deparse.length = 999999)
#1.2.3 We would go to the directory where the script is and do run:
R --vanilla < R-ex-1.R




##2. READ.TABLE OPERATIONS
#As starting from scratch for each d*.txt
#Creating d1.txt
data.set <- read.table("AnotherDataSet.txt", header = TRUE, sep = '\t') 
data.set[data.set == 23.4] <- NA
write.table(data.set, file = "d1.txt")


#Creating d2.txt
data.set <- read.table("AnotherDataSet.txt", header = TRUE, sep = '\t')
data.set[data.set == 23.4] <- " "
data.set[data.set == 14] <- " "
write.table(data.set, file = "d2.txt")


#Creating d3.txt
data.set <- read.table("AnotherDataSet.txt", header = FALSE)
data.set[data.set == 23.4] <- NA
data.set[data.set == 14] <- NA
write.table(data.set, file = "d3.txt", na='" "')


#Creating d4.txt
data.set <- read.table("AnotherDataSet.txt", header = TRUE) 
data.set[data.set == 23.4] <- NA
write("@Hello, I created this file", file = "d4.txt")
write.table(data.set, file = "d4.txt", append = TRUE)
write("@Good bye!", file = "d4.txt", append = TRUE)


#Reading them
read.table('d1.txt') #2.1
read.table('d2.txt', header = TRUE) #2.2
read.table('d3.txt') #2.3
read.table('d4.txt', header = TRUE, comment.char = '@') #2.4




##3. PACKAGES
#OncoSimulR from Bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite("OncoSimulR")


#car from CRAN
install.packages("car")


#3.1
packageVersion("OncoSimulR")
#‘2.4.0’
#3.2
packageVersion("car")
#‘2.1.3’
#3.3 Function must be invoked as
OncoSimulR::oncoSimulIndiv()




##4. HELP
apropos("scatter3d")
#4.1 We get 'character(0)', i.e. that 'scatter3d' is not 
  #contained in the name of any object


help.search("scatter3d")
#4.2 We get the result of searching 'scatter3d' in the help
  #so that we can access the description of the function 
  #which appears to be part of 'car' package


library('car')
#4.3 We get the same output for help.search(), but we get 'scatter3d'
  #for apropos() because there is now a result for the search due to the 
  #fact that car package, to which 'scatter3d' belongs, has already been loaded


#4.4 Yes, while 'car' package is not loaded there is not any object which name
  #contains 'scatter3d', but once the package is loaded there is a result
  #stemming from scatter3d being part of the package


#4.5 Yes, apropos searches objects which contain the indicated name whereas
  #help.search searchs the given name in any place of the documentation


help.search("scatter")
apropos("scatter")
#4.6 It is more useful using using apropos to find any function with apropos
  #in its name, however if the package that contains the function is not 
  #loaded the function will be missed


#4.7 Yes, we can do help.search("scatter3d", fields = "name") so that we just
  #search in the names and not in all the elements of documentation
help.search("scatter3d", fields = "name")




##5. SAVING OBJECTS
x <- 97
y <- 95
save(x, file = "OneObject.RData")


#5.2. Save imagen would have saved all the RStudio environment, the console
#and so on and not only x


##6. VECTORS, DATA FRAMES, ETC
hr <- c(87, 78, 86, 62, 69, 69, 68, 67, 75, 76)
#6.1
age <- rep(c(11, 63, 40, 47), times = c(3, 2, 4, 1))
#6.2
hr[age < 45]
#6.3
hr2 <- hr[age > 45]
names(hr2) <- c('Juan', 'Ana', 'Carmen')
#6.4
hr2[c("Juan", "Ana")]
#6.5
matrix <- matrix(c(hr[!age < 45], age[!age <45] ), ncol = 2)
dimnames(matrix) = list(c("Juan", "Ana", "Carmen"), c("hr", "age"))
matrix
#6.6
dframe <- data.frame(hr = hr[!age < 45], age = age[!age <45], 
           row.names = c("Juan", "Ana", "Carmen"))
dframe
#6.7
dframe2 <- data.frame(name = c("Juan", "Ana", "Carmen"), 
                     hr = hr[!age < 45], age = age[!age <45])
dframe2
#No, it cannot be done with a matrix


#6.8
matrix["Juan", "hr"]
#6.9
matrix["Juan",]
#6.10
dframe["Ana", "hr"]
#6.11
dframe2[2, 2]
#Another way:
dframe2[dframe2["name"] == "Ana", "hr"]
#6.12
dframe2[2, ]
#Another way:
dframe2[dframe2["name"] == "Ana"]
#6.13
dframe2[dframe2["age"] > 60, ]
#6.14
dframe[dframe["age"] > 60, ]
#6.15
matrix2 <- matrix( c(hr, age), ncol = 2)
dimnames(matrix2) = list(NULL, c("hr","age"))
matrix3 <- matrix2[matrix2[,"age"] > 15, ]
matrix3


#6.16
#No, as there are more sexes (11) than individuals (10). If the last sex given
  #is an extra one, then the sexes can correspond to the individuals regarding
  #the sexes are right for the names


#6.17
sex <- c("M", "F")[c(1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1)]
matrix4 <- matrix(c(hr, age), ncol = 2)
dimnames(matrix4) = list(NULL, c("hr", "age"))
sex1 <- sex[matrix3[ ,2] > 15]
matrix5 <- cbind(matrix3, sex1)
matrix5


#6.18
sex2 <- sex[!age < 45]
dframe3 <- cbind(dframe, sex2)
dframe3


##7. SORT AND ORDER
matrix7 <- matrix4[matrix4[ ,"age"] > 15, ]
matrix7
matrix8 <- matrix7[order(matrix7[ ,"hr"]), ]
matrix8
matrix8 <- matrix7[order(matrix7[ ,"age"]), ]
matrix8






