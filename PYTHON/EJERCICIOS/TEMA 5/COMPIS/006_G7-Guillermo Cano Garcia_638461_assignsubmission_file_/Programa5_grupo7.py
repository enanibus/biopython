#Programa 5, grupo 7def GetDNA(Filename1): #Funcion que saca la secuencia de DNA del archivo de texto.    tmpFile1=open(Filename1,"r") #Abre el archivo.    Sequence="" #Crea un string vacio.     for Line in tmpFile1: #Rellena la secuencia con un bucle.        if not (">" in Line): Sequence=Sequence+Line.strip()    tmpFile1.close() #Cierra el archivo.    return(Sequence) #Devuelve la secuencia de DNA.def GetAcNumber(Filename1): #Funcion para extraer el numero de acceso.    MyFile=open(Filename1,"r") #Abre el archivo.    import re #Importa el modilo re.    Sequence="" #Crea un string vacio que llena con la primera linea del archivo FASTA.    for Line in MyFile: #Bucle para sacar la primera linea del archivo FASTA.        if (">" in Line):            Sequence=Sequence+Line.strip()    MyRE=r"[NX]M.\d+.\d" #Expresion regular para extraer el numero de acceso del texto.    MyRegex=re.compile(MyRE)    MyRes=MyRegex.findall(Sequence)    MyFile.close()    return(MyRes)def GetCode(Filename2): #Funcion para crear un diccionario con el codigo genetico.    tmpFile2=open(Filename2,"r") #Abre el archivo.     Code={} #Diccionario vacio.    import re    MyRE=r"[\w*]+" #Expresion regular para buscar cualquier numero, letra o asteriosco tantas veces como este.    MyRegex=re.compile(MyRE)    for Line in tmpFile2:        Data=MyRegex.findall(Line)        Code[Data[0]]=Data[1:] #Bucle que rellena el diccionario creando un diccionario de listas.    tmpFile2.close()     return(Code) def Getrc(Seq): #Define una función para crear el DNA complementario.    rcSequence=""    Complement={"A":"T","C":"G","G":"C","T":"A"} #Diccionario para crear el complementario.    for Base in Seq:        rcSequence=Complement[Base]+rcSequence    return(rcSequence)def Gettranslates(DNA,tmpCode,Outputname):  #Funcion para crear y escribir las proteinas en un archivo.    rcDNA=Getrc(DNA) #Invoca a la funcion Getrc() definida anteriormente para obtener la secuencia de DNA complementaria.    MyFile=open(Outputname,"w") #Abre un archivo.    CurrentStrand="+"    for Strand in [DNA,rcDNA]: #Bucle que traduce la secuencia de DNA y su complementaria.        if CurrentStrand=="+": MyFile.write("PLUS STRAND\n\n\n")        else: MyFile.write("MINUS STRAND\n\n\n")        for x in [0,1,2]: #Concatena un bucle para establecer las tres pautas de lectura.            Translate1="" #String vacio para guardar la traduccion.            Translate2=""            for aa in list(range(x,len(Strand),3)):  #Concatena otro bucle para hacer correspondencia codon-aminoacido.                Codons=Strand[aa:aa+3]                if Codons in tmpCode.keys():                    Aminoacides1=tmpCode[Codons][0]                    Aminoacides2=tmpCode[Codons][1]                Translate1=Translate1+Aminoacides1 #String abierto anteriormente se cierra con el resultado del bucle, la traduccion.                Translate2=Translate2+Aminoacides2            MyFile.write("Frame"+str(x+1)+"\n\n"+Translate1+"\n"+Translate2+"\n\n\n\n") #Escribe las traducciones resultantes en el archivo.        CurrentStrand="-"     MyFile.close() def Main(): #Define la funcion principal del programa.    MyDNA=GetDNA(sys.argv[1]) #Obtiene la secuencia de DNA cuando se la damos como argumento.    AcNumber=GetAcNumber(sys.argv[1])     MyCode=GetCode("GeneticCode_standard.csv") #Invoca a la funcion que crea el codigo.     Gettranslates(MyDNA,MyCode,AcNumber[0] + ".txt")  #Escribe un archivo con las 6 traducciones.    print("Se ha ejecutado el proceso correctamente.")    print("Se ha creado el archivo " + AcNumber[0] + ".txt en su carpeta.")    if __name__=="__main__": #Establece un condicional para que solo se ejecute esta parte del codigo si es el script principal.    import sys #Importa el modulo sys que permitirán al usuario dar los nombres de los archivos por línea de comando.    Main() #Invoca la función principal del programa.                                    